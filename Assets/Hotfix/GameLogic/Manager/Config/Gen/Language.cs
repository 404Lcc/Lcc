
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class Language : Luban.BeanBase
{
    public Language(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["key"].IsString) { throw new SerializationException(); }  Key = _buf["key"]; }
        { if(!_buf["chinese"].IsString) { throw new SerializationException(); }  Chinese = _buf["chinese"]; }
        { if(!_buf["traditionalChinese"].IsString) { throw new SerializationException(); }  TraditionalChinese = _buf["traditionalChinese"]; }
        { if(!_buf["english"].IsString) { throw new SerializationException(); }  English = _buf["english"]; }
        { if(!_buf["korean"].IsString) { throw new SerializationException(); }  Korean = _buf["korean"]; }
        { if(!_buf["russian"].IsString) { throw new SerializationException(); }  Russian = _buf["russian"]; }
        { if(!_buf["german"].IsString) { throw new SerializationException(); }  German = _buf["german"]; }
        { if(!_buf["vietnamese"].IsString) { throw new SerializationException(); }  Vietnamese = _buf["vietnamese"]; }
        { if(!_buf["thai"].IsString) { throw new SerializationException(); }  Thai = _buf["thai"]; }
        { if(!_buf["french"].IsString) { throw new SerializationException(); }  French = _buf["french"]; }
        { if(!_buf["japanese"].IsString) { throw new SerializationException(); }  Japanese = _buf["japanese"]; }
        { if(!_buf["spanish"].IsString) { throw new SerializationException(); }  Spanish = _buf["spanish"]; }
        { if(!_buf["arabic"].IsString) { throw new SerializationException(); }  Arabic = _buf["arabic"]; }
    }

    public static Language DeserializeLanguage(JSONNode _buf)
    {
        return new Language(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// key
    /// </summary>
    public readonly string Key;
    /// <summary>
    /// 简体中文
    /// </summary>
    public readonly string Chinese;
    /// <summary>
    /// 繁体中文
    /// </summary>
    public readonly string TraditionalChinese;
    /// <summary>
    /// 英文
    /// </summary>
    public readonly string English;
    /// <summary>
    /// 韩文
    /// </summary>
    public readonly string Korean;
    /// <summary>
    /// 俄语
    /// </summary>
    public readonly string Russian;
    /// <summary>
    /// 德语
    /// </summary>
    public readonly string German;
    /// <summary>
    /// 越南语
    /// </summary>
    public readonly string Vietnamese;
    /// <summary>
    /// 泰语
    /// </summary>
    public readonly string Thai;
    /// <summary>
    /// 法语
    /// </summary>
    public readonly string French;
    /// <summary>
    /// 日语
    /// </summary>
    public readonly string Japanese;
    /// <summary>
    /// 西班牙语
    /// </summary>
    public readonly string Spanish;
    /// <summary>
    /// 阿拉伯语
    /// </summary>
    public readonly string Arabic;
   
    public const int __ID__ = -1548945544;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "key:" + Key + ","
        + "chinese:" + Chinese + ","
        + "traditionalChinese:" + TraditionalChinese + ","
        + "english:" + English + ","
        + "korean:" + Korean + ","
        + "russian:" + Russian + ","
        + "german:" + German + ","
        + "vietnamese:" + Vietnamese + ","
        + "thai:" + Thai + ","
        + "french:" + French + ","
        + "japanese:" + Japanese + ","
        + "spanish:" + Spanish + ","
        + "arabic:" + Arabic + ","
        + "}";
    }
}

}
