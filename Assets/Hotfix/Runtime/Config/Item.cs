
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class Item : Luban.BeanBase
{
    public Item(JSONNode _buf) 
    {
        { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
        { if(!_buf["name"].IsString) { throw new SerializationException(); }  Name = _buf["name"]; }
        { if(!_buf["icon"].IsNumber) { throw new SerializationException(); }  Icon = _buf["icon"]; }
        { if(!_buf["quality"].IsNumber) { throw new SerializationException(); }  Quality = (QualityType)_buf["quality"].AsInt; }
        { if(!_buf["type"].IsNumber) { throw new SerializationException(); }  Type = (ItemType)_buf["type"].AsInt; }
        { if(!_buf["smallType"].IsNumber) { throw new SerializationException(); }  SmallType = (ItemSmallType)_buf["smallType"].AsInt; }
        { if(!_buf["smallSubId"].IsNumber) { throw new SerializationException(); }  SmallSubId = _buf["smallSubId"]; }
        { if(!_buf["tips"].IsString) { throw new SerializationException(); }  Tips = _buf["tips"]; }
        { if(!_buf["stack"].IsNumber) { throw new SerializationException(); }  Stack = _buf["stack"]; }
        { if(!_buf["isUse"].IsBoolean) { throw new SerializationException(); }  IsUse = _buf["isUse"]; }
        { if(!_buf["notDisplay"].IsBoolean) { throw new SerializationException(); }  NotDisplay = _buf["notDisplay"]; }
    }

    public static Item DeserializeItem(JSONNode _buf)
    {
        return new Item(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 名称
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 图标
    /// </summary>
    public readonly int Icon;
    /// <summary>
    /// 品质
    /// </summary>
    public readonly QualityType Quality;
    /// <summary>
    /// 道具类型
    /// </summary>
    public readonly ItemType Type;
    /// <summary>
    /// 道具小类型
    /// </summary>
    public readonly ItemSmallType SmallType;
    /// <summary>
    /// 道具子id
    /// </summary>
    public readonly int SmallSubId;
    /// <summary>
    /// 点击提示语
    /// </summary>
    public readonly string Tips;
    /// <summary>
    /// 堆叠数量
    /// </summary>
    public readonly int Stack;
    /// <summary>
    /// 是否可以使用
    /// </summary>
    public readonly bool IsUse;
    /// <summary>
    /// 是否隐藏不显示
    /// </summary>
    public readonly bool NotDisplay;
   
    public const int __ID__ = 2289459;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "icon:" + Icon + ","
        + "quality:" + Quality + ","
        + "type:" + Type + ","
        + "smallType:" + SmallType + ","
        + "smallSubId:" + SmallSubId + ","
        + "tips:" + Tips + ","
        + "stack:" + Stack + ","
        + "isUse:" + IsUse + ","
        + "notDisplay:" + NotDisplay + ","
        + "}";
    }
}

}
