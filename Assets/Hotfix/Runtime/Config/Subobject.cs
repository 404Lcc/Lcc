
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class Subobject : Luban.BeanBase
{
    public Subobject(JSONNode _buf) 
    {
        { if(!_buf["subobjectId"].IsNumber) { throw new SerializationException(); }  SubobjectId = _buf["subobjectId"]; }
        { if(!_buf["modelId"].IsNumber) { throw new SerializationException(); }  ModelId = _buf["modelId"]; }
        { if(!_buf["during"].IsNumber) { throw new SerializationException(); }  During = _buf["during"]; }
        { if(!_buf["btScript"].IsString) { throw new SerializationException(); }  BtScript = _buf["btScript"]; }
        { if(!_buf["hitFxId"].IsNumber) { throw new SerializationException(); }  HitFxId = _buf["hitFxId"]; }
        { if(!_buf["damageRate"].IsNumber) { throw new SerializationException(); }  DamageRate = _buf["damageRate"]; }
        { if(!_buf["collisionType"].IsNumber) { throw new SerializationException(); }  CollisionType = (CollisionType)_buf["collisionType"].AsInt; }
        { if(!_buf["singleCollisionCount"].IsNumber) { throw new SerializationException(); }  SingleCollisionCount = _buf["singleCollisionCount"]; }
        { if(!_buf["maxCollisionCount"].IsNumber) { throw new SerializationException(); }  MaxCollisionCount = _buf["maxCollisionCount"]; }
        { if(!_buf["collisionInterval"].IsNumber) { throw new SerializationException(); }  CollisionInterval = _buf["collisionInterval"]; }
        { if(!_buf["collisionWithLife"].IsBoolean) { throw new SerializationException(); }  CollisionWithLife = _buf["collisionWithLife"]; }
    }

    public static Subobject DeserializeSubobject(JSONNode _buf)
    {
        return new Subobject(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public readonly int SubobjectId;
    /// <summary>
    /// 模型id
    /// </summary>
    public readonly int ModelId;
    /// <summary>
    /// 持续时间
    /// </summary>
    public readonly float During;
    /// <summary>
    /// 行为树脚本
    /// </summary>
    public readonly string BtScript;
    /// <summary>
    /// 受击特效id
    /// </summary>
    public readonly int HitFxId;
    /// <summary>
    /// 伤害倍率
    /// </summary>
    public readonly float DamageRate;
    /// <summary>
    /// 碰撞类型
    /// </summary>
    public readonly CollisionType CollisionType;
    /// <summary>
    /// 单实体碰撞次数
    /// </summary>
    public readonly int SingleCollisionCount;
    /// <summary>
    /// 最大碰撞次数
    /// </summary>
    public readonly int MaxCollisionCount;
    /// <summary>
    /// 碰撞间隔
    /// </summary>
    public readonly float CollisionInterval;
    /// <summary>
    /// 碰撞结束消失
    /// </summary>
    public readonly bool CollisionWithLife;
   
    public const int __ID__ = -1891839649;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "subobjectId:" + SubobjectId + ","
        + "modelId:" + ModelId + ","
        + "during:" + During + ","
        + "btScript:" + BtScript + ","
        + "hitFxId:" + HitFxId + ","
        + "damageRate:" + DamageRate + ","
        + "collisionType:" + CollisionType + ","
        + "singleCollisionCount:" + SingleCollisionCount + ","
        + "maxCollisionCount:" + MaxCollisionCount + ","
        + "collisionInterval:" + CollisionInterval + ","
        + "collisionWithLife:" + CollisionWithLife + ","
        + "}";
    }
}

}
