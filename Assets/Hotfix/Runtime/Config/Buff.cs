
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace cfg
{
public sealed partial class Buff : Luban.BeanBase
{
    public Buff(JSONNode _buf) 
    {
        { if(!_buf["buffId"].IsNumber) { throw new SerializationException(); }  BuffId = _buf["buffId"]; }
        { if(!_buf["name"].IsString) { throw new SerializationException(); }  Name = _buf["name"]; }
        { if(!_buf["desc"].IsString) { throw new SerializationException(); }  Desc = _buf["desc"]; }
        { if(!_buf["during"].IsNumber) { throw new SerializationException(); }  During = _buf["during"]; }
        { if(!_buf["stack"].IsBoolean) { throw new SerializationException(); }  Stack = _buf["stack"]; }
        { if(!_buf["iconId"].IsNumber) { throw new SerializationException(); }  IconId = _buf["iconId"]; }
        { if(!_buf["buffGroup"].IsNumber) { throw new SerializationException(); }  BuffGroup = _buf["buffGroup"]; }
        { if(!_buf["maxStack"].IsNumber) { throw new SerializationException(); }  MaxStack = _buf["maxStack"]; }
        { if(!_buf["btScript"].IsString) { throw new SerializationException(); }  BtScript = _buf["btScript"]; }
        { if(!_buf["maskType"].IsNumber) { throw new SerializationException(); }  MaskType = _buf["maskType"]; }
        { if(!_buf["boolBuffType"].IsNumber) { throw new SerializationException(); }  BoolBuffType = (BoolPropertyType)_buf["boolBuffType"].AsInt; }
        { var __json0 = _buf["valueBuffType"]; if(!__json0.IsArray) { throw new SerializationException(); } ValueBuffType = new System.Collections.Generic.List<TBBuffValue>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { TBBuffValue __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = TBBuffValue.DeserializeTBBuffValue(__e0);  }  ValueBuffType.Add(__v0); }   }
        { if(!_buf["immuneBoolBuffType"].IsNumber) { throw new SerializationException(); }  ImmuneBoolBuffType = (BoolPropertyType)_buf["immuneBoolBuffType"].AsInt; }
        { if(!_buf["disperseBoolBuffType"].IsNumber) { throw new SerializationException(); }  DisperseBoolBuffType = (BoolPropertyType)_buf["disperseBoolBuffType"].AsInt; }
        { var __json0 = _buf["immuneValueBuffTypeList"]; if(!__json0.IsArray) { throw new SerializationException(); } ImmuneValueBuffTypeList = new System.Collections.Generic.List<ValuePropertyType>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { ValuePropertyType __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = (ValuePropertyType)__e0.AsInt; }  ImmuneValueBuffTypeList.Add(__v0); }   }
        { var __json0 = _buf["disperseValueBuffTypeList"]; if(!__json0.IsArray) { throw new SerializationException(); } DisperseValueBuffTypeList = new System.Collections.Generic.List<ValuePropertyType>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { ValuePropertyType __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = (ValuePropertyType)__e0.AsInt; }  DisperseValueBuffTypeList.Add(__v0); }   }
        { var __json0 = _buf["immuneBuffGroupList"]; if(!__json0.IsArray) { throw new SerializationException(); } ImmuneBuffGroupList = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  ImmuneBuffGroupList.Add(__v0); }   }
        { var __json0 = _buf["disperseBuffGroupList"]; if(!__json0.IsArray) { throw new SerializationException(); } DisperseBuffGroupList = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  DisperseBuffGroupList.Add(__v0); }   }
        { if(!_buf["isDisperse"].IsBoolean) { throw new SerializationException(); }  IsDisperse = _buf["isDisperse"]; }
        { var __json0 = _buf["buffFx"]; if(!__json0.IsArray) { throw new SerializationException(); } BuffFx = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  BuffFx.Add(__v0); }   }
    }

    public static Buff DeserializeBuff(JSONNode _buf)
    {
        return new Buff(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public readonly int BuffId;
    /// <summary>
    /// 名称
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 描述
    /// </summary>
    public readonly string Desc;
    /// <summary>
    /// 持续时间
    /// </summary>
    public readonly float During;
    /// <summary>
    /// 能否叠加
    /// </summary>
    public readonly bool Stack;
    /// <summary>
    /// 图标
    /// </summary>
    public readonly int IconId;
    /// <summary>
    /// buff组
    /// </summary>
    public readonly int BuffGroup;
    /// <summary>
    /// 最大层数
    /// </summary>
    public readonly int MaxStack;
    /// <summary>
    /// 行为树脚本
    /// </summary>
    public readonly string BtScript;
    /// <summary>
    /// mask
    /// </summary>
    public readonly int MaskType;
    /// <summary>
    /// bool属性类型
    /// </summary>
    public readonly BoolPropertyType BoolBuffType;
    /// <summary>
    /// 类型
    /// </summary>
    public readonly System.Collections.Generic.List<TBBuffValue> ValueBuffType;
    /// <summary>
    /// 免疫boolbuff类型
    /// </summary>
    public readonly BoolPropertyType ImmuneBoolBuffType;
    /// <summary>
    /// 驱散boolbuff类型
    /// </summary>
    public readonly BoolPropertyType DisperseBoolBuffType;
    /// <summary>
    /// 免疫valuebuff类型
    /// </summary>
    public readonly System.Collections.Generic.List<ValuePropertyType> ImmuneValueBuffTypeList;
    /// <summary>
    /// 驱散valuebuff类型
    /// </summary>
    public readonly System.Collections.Generic.List<ValuePropertyType> DisperseValueBuffTypeList;
    /// <summary>
    /// 免疫buff组id
    /// </summary>
    public readonly System.Collections.Generic.List<int> ImmuneBuffGroupList;
    /// <summary>
    /// 驱散buff组id
    /// </summary>
    public readonly System.Collections.Generic.List<int> DisperseBuffGroupList;
    /// <summary>
    /// 不可驱散
    /// </summary>
    public readonly bool IsDisperse;
    /// <summary>
    /// buff自带特效
    /// </summary>
    public readonly System.Collections.Generic.List<int> BuffFx;
   
    public const int __ID__ = 2081907;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        foreach (var _e in ValueBuffType) { _e?.ResolveRef(tables); }
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "buffId:" + BuffId + ","
        + "name:" + Name + ","
        + "desc:" + Desc + ","
        + "during:" + During + ","
        + "stack:" + Stack + ","
        + "iconId:" + IconId + ","
        + "buffGroup:" + BuffGroup + ","
        + "maxStack:" + MaxStack + ","
        + "btScript:" + BtScript + ","
        + "maskType:" + MaskType + ","
        + "boolBuffType:" + BoolBuffType + ","
        + "valueBuffType:" + Luban.StringUtil.CollectionToString(ValueBuffType) + ","
        + "immuneBoolBuffType:" + ImmuneBoolBuffType + ","
        + "disperseBoolBuffType:" + DisperseBoolBuffType + ","
        + "immuneValueBuffTypeList:" + Luban.StringUtil.CollectionToString(ImmuneValueBuffTypeList) + ","
        + "disperseValueBuffTypeList:" + Luban.StringUtil.CollectionToString(DisperseValueBuffTypeList) + ","
        + "immuneBuffGroupList:" + Luban.StringUtil.CollectionToString(ImmuneBuffGroupList) + ","
        + "disperseBuffGroupList:" + Luban.StringUtil.CollectionToString(DisperseBuffGroupList) + ","
        + "isDisperse:" + IsDisperse + ","
        + "buffFx:" + Luban.StringUtil.CollectionToString(BuffFx) + ","
        + "}";
    }
}

}
